'''
	-------------------------
	ford_export_pf3De_to_Maya
	-------------------------
	v0.1.5
	
	daniel forgacs / ford
	forgacs.daniel@gmail.com
	
	the script is based on the 3De to Maya exporter
	
	_________________________________________________________________
	
	exports 3De projects as mel script and sources the script in maya.
	maya has to have an open communication port:
	
	commandPort -name ":6001";
	
	- the mel file is named after the 3De scene
	- it`s saved in the same folder as the 3De scene
	- the first frame is set based on the selected camera`s sequence
	
	changelog:
	21 may 2012 - cleanUp, logging added
	
	18 may 2012 - cleanup
					exported mel script sets up render globals
	
	17 may 2012 - cleanup
	
	15 may 2012	- saved mel script goes into the "melExport" folder
					in the same folder where 3De project is saved
					if folder doesn`t exists it`s created.
				- added printing some info in maya
				- connection is closed now after the script finished
	
	15 may 2012	- script clean up,
				- first frame from sequence options
				
	14 may 2012	- file save dialog deleted
	
	known bugs:
	
	planned development:
'''

import	sys
import	os
import	socket

instpath	= tde4.get3DEInstallPath()
sys.path.append ("%s/sys_data/py_vl_sdv" % instpath)

from	vl_sdv				import	*
from	pf_maya_distortion	import	exportDistortionParameters

###########################################################################################
class f_log (object):
	"""script logging"""
	
	def __init__ (self, path):
		self.path	= path
		self.reset ()
	
	def add (self, data, value = 'OK'):
		file	= open (self.path, 'a')
		line	= '{0:.<30} {1}'.format ('> ' + data + ': ', ' ' + value + '\n')
		file.write (line)
		file.close()
	
	def reset (self):
		file	= open (self.path, 'w')
		file.close()

###########################################################################################
def convert_to_angles (r3d):
	pi	= 3.141592654
	rot	= rot3d (mat3d (r3d)).angles (VL_APPLY_ZXY)
	rx	= (rot[0] * 180.0) / pi
	ry	= (rot[1] * 180.0) / pi
	rz	= (rot[2] * 180.0) / pi
	return (rx, ry, rz)

###########################################################################################
def convert_z_up (p3d, yup):
	if yup == 1: 	return (p3d)
	else: 			return ([p3d[0], -p3d[2], p3d[1]])

###########################################################################################
def angleMod360 (d0, d):
	dd = d - d0
	
	if dd > 180.0:
		d = angleMod360 (d0, d - 360.0)
	else:
		if dd <- 180.0:
			d = angleMod360 (d0, d + 360.0)
	return d

###########################################################################################
def get_valid_name (name):
	return name.replace (" ", "_").replace ("\n", "").replace ("\r", "")

###########################################################################################	
def convert_mm_to_inch (value):
	value	/= 2.54
	return value
	
# #####################################################
### MAIN ##############################################
projectPath	= tde4.getProjectPath()	# get export path and filename
projectName	= projectPath[projectPath.rfind('/') + 1:-4]	# file name only
exportPath	= projectPath[:projectPath.rfind('/')] + '/melExport/'	# export folder
log		= f_log (exportPath + projectName + '.exportLog')
log.add ('project path', projectPath)
log.add ('export path', exportPath)


# get shot parameters
cameraID	= tde4.getCurrentCamera()
camera		= tde4.getCameraName(cameraID)
log.add ('current camera', camera)

seqAttrs	= tde4.getCameraSequenceAttr(cameraID)
startFrame	= seqAttrs[0]
endFrame	= seqAttrs[1]
log.add ('frame range', `startFrame` + ' - ' + `endFrame`)

# check if default export folder exists, if not, create
if not os.path.exists (exportPath):
	os.mkdir (exportPath)
	log.add ('export folder created', exportPath)

exportPath	+= projectName + '.mel'
log.add ('mel script file', exportPath)

# beginning of maya mel scene
melScript	= '// melScript generated by 3Dequlazer'
melScript	+= '\nprint "> melScript generated by 3Dequlazer\\n";'
melScript	+= '\n\n// 3De scene: %s' % projectPath
melScript	+= '\nprint "> 3De scene: %s\\n";' % projectPath
melScript	+= "\n\n// create scene group"
melScript	+= '\nstring $sceneGroupName = `group -em -name "mm_%s"`;' % projectName
melScript	+= '\n\n//\nprint "> matchmove scene group: %s ..... OK\\n";' % projectName

camPointGrp	= None

for pg in tde4.getPGroupList():
	if tde4.getPGroupType (pg) == "CAMERA":
		camPointGrp = pg

doExport	= True

if camPointGrp == None:
	tde4.postQuestionRequester ("Export Maya (Prime Focus)", "Error, there is no camera point group.", "Ok")
	doExport	= False
	log.add ('no camera point group','...')

# if pointgroups exists create mel file
if doExport:
	yup		= 1
	frame0	= startFrame - 1

	if exportPath != None:
		f = open (exportPath, "w")
		
		if not f.closed:
			cameraList	= tde4.getCameraList()
			index		= 1

			for cam in cameraList:
				camType     = tde4.getCameraType (cam)
				noframes    = tde4.getCameraNoFrames (cam)
				lens        = tde4.getCameraLens (cam)
				
				if lens != None:
					name        = "%s_%s_1" % (get_valid_name (tde4.getCameraName (cam)), index)
					index       += 1

					# convert filmback to inch...
					fback_w     = convert_mm_to_inch (tde4.getLensFBackWidth (lens))
					fback_h     = convert_mm_to_inch (tde4.getLensFBackHeight (lens))
					lco_x       = convert_mm_to_inch (tde4.getLensLensCenterX (lens))
					lco_y       = convert_mm_to_inch (tde4.getLensLensCenterY (lens))

					# convert focal length to mm...
					focal       = tde4.getCameraFocalLength (cam, 1) * 10

					melScript	+= '\n\n// create camera: %s;' % camera
					melScript	+= '\nstring $cameraNodes[] = `camera -name "%s" -hfa %.15f  -vfa %.15f -fl %.15f -ncp 0.01 -fcp 10000 -shutterAngle 180 -ff "overscan"`;' \
									 % (name, fback_w, fback_h, focal)
					melScript	+= '\nstring $cameraTransform = $cameraNodes[0];'
					melScript	+= '\nstring $cameraShape = $cameraNodes[1];'
					melScript	+= '\nxform -zeroTransformPivots -rotateOrder zxy $cameraTransform;'
					melScript	+= '\nsetAttr ($cameraShape + ".horizontalFilmOffset") %.15f;' % lco_x
					melScript	+= '\nsetAttr ($cameraShape + ".verticalFilmOffset") % .15f;' % lco_y
					melScript	+= '\n\n//\nprint "> camera setup ..... OK\\n";'

					# attach distortion parameters to the Maya camera
					melScript	+= '\n\n// setup lens distortion parameters\n'
					log.add ('adding lens parameters with external script', '...')
					
					f.write (melScript)
					
					log.add ('lens parameters')
					
					# this function writes out lens parameters
					# file handle is given, no return value!!!
					exportDistortionParameters (tde4, cam, lens, f, frame0)
					
					# empty melScript to prevent writing stuff twice
					melScript	= '\n\n// lens distortion OK'
					melScript	+= '\nprint "> lens distortion ..... OK\\n";'
					
					# lensdistortion parameters are missing here from the new mel script exoprter
					p3d = convert_z_up (tde4.getPGroupPosition3D (camPointGrp, cam, 1), yup)
					rot = convert_to_angles (tde4.getPGroupRotation3D (camPointGrp, cam, 1))
					log.add ('angle & z up conversion')

					melScript	+= '\n\nxform -translation %.15f %.15f %.15f $cameraTransform;' % (p3d[0], p3d[1], p3d[2])
					melScript	+= '\nxform -rotation %.15f %.15f %.15f $cameraTransform;' % rot
					melScript	+= '\nxform -scale 1 1 1 $cameraTransform;'

					# image plane...
					melScript	+= '\n\n// create image plane'
					melScript	+= '\nstring $imagePlane = `createNode imagePlane`;'
					melScript	+= '\ncameraImagePlaneUpdate ($cameraShape, $imagePlane);'
					melScript	+= '\nsetAttr ($imagePlane + ".offsetX") %.15f;'	% lco_x
					melScript	+= '\nsetAttr ($imagePlane + ".offsetY") %.15f;'	% lco_y
					melScript	+= '\nsetAttr ($imagePlane + ".useFrameExtension") %d;' % int (camType == "SEQUENCE")
					melScript	+= '\nexpression -n "frame_ext_expression" -s ($imagePlane + ".frameExtension = frame");'
					
					log.add ('image plane')

					# getting image plane path
					platePath	= tde4.getCameraPath (cam)
					
					log.add ('footage path', platePath)
					
					#if DEBUG: platePath	= '/jobs/tr/users/daniel/089_mal/089_mal_1025/track/dl_plates/089_mal_089_mal_1025_track_dl_plates_mp01/089_mal_089_mal_1025_track_dl_plates_mp01.01005.jpg'
					
					melScript	+= '\nsetAttr ($imagePlane + ".imageName") -type "string" "%s";' % platePath
					melScript	+= '\nsetAttr ($imagePlane + ".fit") 4;'
					melScript	+= '\nsetAttr ($imagePlane + ".displayOnlyIfCurrent") 1;'
					melScript	+= '\nsetAttr ($imagePlane + ".depth") (9000/2);'
					melScript	+= '\n\n//\nprint "> image plane ..... OK\\n";'
					melScript	+= '\n\n// parent camera to scene group'
					melScript	+= '\nparent $cameraTransform $sceneGroupName;'
					melScript	+= '\n\n// animating camera: %s' % name
					melScript	+= '\nplaybackOptions -min %d -max %d;' % (1 + frame0 , noframes + frame0)
					
					log.add ('image plane')

					frame   = 1
					
					# animate camera...
					log.add ('animating camera','start')
					while frame <= noframes:
						# rot/pos...
						p3d = convert_z_up (tde4.getPGroupPosition3D (camPointGrp, cam, frame), yup)
						r3d = tde4.getPGroupRotation3D (camPointGrp, cam, frame)
						rot = convert_to_angles (r3d)

						if frame > 1:
							rot = [angleMod360 (rot0[0], rot[0]), angleMod360 (rot0[1], rot[1]), angleMod360 (rot0[2], rot[2])]
						
						rot0    = rot
						
						melScript	+= '\nsetKeyframe -at translateX -t %d -v %.15f $cameraTransform;' % (frame + frame0, p3d[0])
						melScript	+= ' setKeyframe -at translateY -t %d -v %.15f $cameraTransform;' % (frame + frame0, p3d[1])
						melScript	+= ' setKeyframe -at translateZ -t %d -v %.15f $cameraTransform;' % (frame + frame0, p3d[2])
						melScript	+= ' setKeyframe -at rotateX -t %d -v %.15f $cameraTransform;' % (frame + frame0, rot[0])
						melScript	+= ' setKeyframe -at rotateY -t %d -v %.15f $cameraTransform;' % (frame + frame0, rot[1])
						melScript	+= ' setKeyframe -at rotateZ -t %d -v %.15f $cameraTransform;' % (frame + frame0, rot[2])

						# focal length...
						focal   	= tde4.getCameraFocalLength (cam, frame) * 10
						melScript	+= ' setKeyframe -at focalLength -t %d -v %.15f $cameraShape;' % (frame + frame0, focal)


						frame   += 1

					# lock channels in channelbox
					melScript	+= '\n\n//\nprint "> camera animation ..... OK\\n";'
					melScript	+= '\n\n// lock camera channels in channel box'
					
					log.add ('camera anim')

					for attribute in ["translateX", "translateY", "translateZ",
									"rotateX", "rotateY", "rotateZ",
									"scaleX", "scaleY", "scaleZ",
									"cameraScale",
									"horizontalFilmAperture", "verticalFilmAperture",
									"focalLength",
									"lensSqueezeRatio",
									"fStop",
									"focusDistance",
									"shutterAngle",
									"centerOfInterest",
									"filmFitOffset"]:
						melScript	+= '\nsetAttr ($cameraTransform + ".%s") -lock 1;' % attribute
					
					log.add ('lock camera channels')
						
			melScript	+= '\n\nprint "> camera channels locked ..... OK\\n";'

			name    = "cameraPGroup_%s_1" % get_valid_name (tde4.getPGroupName (camPointGrp))

			melScript	+= '\n\n// create camera point group'
			melScript	+= '\nstring $pointGroupName = `group -em -name "%s" -parent $sceneGroupName`;' % name
			melScript	+= '\n$pointGroupName = ($sceneGroupName + \"|\" + $pointGroupName);'

			pointList   = tde4.getPointList(camPointGrp)
			
			# write points...
			log.add ('writing points','start')
			
			for point in pointList:
				if tde4.isPointCalculated3D(camPointGrp,point):
					name    = 'p%s' % get_valid_name (tde4.getPointName (camPointGrp, point))
					p3d 	= convert_z_up (tde4.getPointCalcPosition3D (camPointGrp, point), yup)

					melScript += '\n\n// create point %s' % name
					melScript += '\nstring $locator = stringArrayToString(`spaceLocator -name %s`, \"\");' % name
					melScript += '\n$locator = (\"|\" + $locator);'
					melScript += '\nxform -t %.15f %.15f %.15f $locator;' % (p3d[0], p3d[1], p3d[2])
					melScript += '\nparent $locator $pointGroupName;'

			log.add ('points')
			
			melScript += '\n\nxform -zeroTransformPivots -rotateOrder zxy -scale 1.000000 1.000000 1.000000 $pointGroupName;'

			# write object point groups...
			camera      = tde4.getCurrentCamera ()
			noframes    = tde4.getCameraNoFrames (camera)
			pgl		    = tde4.getPGroupList()
			index       = 1
			
			log.add ('line 339 loop', 'start')
			
			for pg in pgl:
				if tde4.getPGroupType (pg) == "OBJECT" and camera != None:
					melScript	+= '\n\n// create object point group'
					pgname  	= "objectPGroup_%s_%d_1" % (get_valid_name (tde4.getPGroupName (pg)), index)
					index		+= 1
					melScript	+= '\nstring $pointGroupName = `group -em -name  \"%s\" -parent $sceneGroupName`;' % pgname
					melScript	+= '\n$pointGroupName = ($sceneGroupName + \"|\" + $pointGroupName);'
					l			= tde4.getPointList (pg)

					for p in l:
						if tde4.isPointCalculated3D (pg, p):
							name    = "p%s" % get_valid_name (tde4.getPointName (pg, p))
							p3d		= convert_z_up (tde4.getPointCalcPosition3D (pg, p), yup)
							
							melScript	+= '\n\n// create point %s' % name
							melScript	+= '\nstring $locator = stringArrayToString (`spaceLocator -name %s`, \"\");' % name
							melScript	+= '\n$locator = (\"|\" + $locator);'
							melScript	+= '\nxform -t %.15f %.15f %.15f $locator;' % (p3d[0], p3d[1], p3d[2])
							melScript	+= '\nparent $locator $pointGroupName;'

					scale   = tde4.getPGroupScale3D(pg)
					melScript	+= '\nxform -zeroTransformPivots -rotateOrder zxy -scale %.15f %.15f %.15f $pointGroupName;' \
									% (scale, scale, scale)

					# animate object point group...
					melScript	+= '\n\n// animating point group %s' % pgname
					
					frame		= 1
					
					while frame <= noframes:
						p3d = convert_z_up (tde4.getPGroupPosition3D (pg, camera, frame), yup)
						rot = convert_to_angles (tde4.getPGroupRotation3D (pg, camera, frame))

						if frame > 1:
							rot = [angleMod360(rot0[0],rot[0]), angleMod360(rot0[1],rot[1]), angleMod360(rot0[2],rot[2])]

						melScript	+= 'setKeyframe -at translateX -t %d -v %.15f $pointGroupName;' % (frame + frame0, p3d[0])
						melScript	+= ' setKeyframe -at translateY -t %d -v %.15f $pointGroupName;' % (frame + frame0, p3d[1])
						melScript	+= ' setKeyframe -at translateZ -t %d -v %.15f $pointGroupName;' % (frame + frame0, p3d[2])
						melScript	+= ' setKeyframe -at rotateX -t %d -v %.15f $pointGroupName;' % (frame + frame0,rot[0])
						melScript	+= ' setKeyframe -at rotateY -t %d -v %.15f $pointGroupName;' % (frame + frame0, rot[1])
						melScript	+= ' setKeyframe -at rotateZ -t %d -v %.15f $pointGroupName;' % (frame + frame0, rot[2])

						frame   += 1
			
			log.add ('line 339 loop')
			
			# global (scene node) transformation...
			p3d		= convert_z_up (tde4.getScenePosition3D(), yup)
			rot		= convert_to_angles (tde4.getSceneRotation3D())
			s		= tde4.getSceneScale3D()

			melScript += '\nxform -zeroTransformPivots -rotateOrder zxy -translation %.15f %.15f %.15f -scale %.15f %.15f %.15f -rotation %.15f %.15f %.15f $sceneGroupName;' \
									% (p3d[0], p3d[1], p3d[2], s, s, s, rot[0], rot[1], rot[2])
			melScript += '\nselect -r $sceneGroupName;'
			melScript += '\n\n//\nprint "> point groups ..... OK\\n";'
			
			log.add ('point groups')
			
			# setting up maya globals
			melScript += '\n\n// setup render globals'
			melScript += '\nsetAttr "defaultRenderGlobals.startFrame" %s;' % startFrame
			melScript += '\nsetAttr "defaultRenderGlobals.endFrame" %s;' % endFrame
			melScript += '\nplaybackOptions -animationStartTime %s;' % startFrame
			melScript += '\nplaybackOptions -animationEndTime %s;' % endFrame
			melScript += '\nplaybackOptions -minTime %s;' % startFrame
			melScript += '\nplaybackOptions -maxTime %s;' % endFrame
			melScript += '\nsetAttr "defaultRenderGlobals.putFrameBeforeExt" 1;'
			melScript += '\nsetAttr "defaultRenderGlobals.animation" 1;'
			melScript += '\nsetAttr "defaultRenderGlobals.extensionPadding" 4;'
			melScript += '\nsetAttr -type "string" defaultRenderGlobals.imageFilePrefix "<Scene>_<RenderLayer>/<Scene>_<RenderLayer>_<Camera>";'
			melScript += '\nsetAttr "defaultResolution.width" %s;' % tde4.getCameraImageWidth (cameraID)
			melScript += '\nsetAttr "defaultResolution.height" %s;' % tde4.getCameraImageHeight (cameraID)
			melScript += '\nsetAttr "defaultResolution.lockDeviceAspectRatio" 1;'
			melScript += '\nsetAttr "defaultResolution.deviceAspectRatio" %s;' % tde4.getLensFilmAspect (tde4.getCameraLens (cameraID))
			melScript += '\nsetAttr "perspShape.renderable" 0;'
			melScript += '\nmentalrayUI "";'
			melScript += '\n$mm_displayLayer = `createDisplayLayer -name "mm_%s_dl"`;' % projectName
			melScript += '\neditDisplayLayerMembers $mm_displayLayer "mm_%s";' % projectName
			melScript += '\n\n//\nprint "> render globals ..... OK\\n";'
			melScript += '\n\n//\nprint "> mel script OK\\n";'
			
			log.add ('maya scene setup')

			f.write (melScript)
			f.close ()
			#print '> export DONE.'
			log.add ('mel script file')
			
		else:
			tde4.postQuestionRequester("Export Maya (Prime Focus)","Error, couldn't open file.","Ok")

# open maya connection
log.add ('connecting maya','start')
maya	= socket.socket (socket.AF_INET, socket.SOCK_STREAM)
maya.connect (('localhost', 6001))
maya.send ('print "========================================\\n";')

# source script in maya
maya.send ('source "%s";' % exportPath)
maya.send ('print "---> 3De scene: %s\\n";' % projectPath)
maya.send ('print "---> mel script: %s\\n";' % exportPath)
maya.send ('print "---> 3De export done\\n";')
maya.send ('currentTime %s' % `startFrame`)
maya.close ()
log.add ('maya setup')
